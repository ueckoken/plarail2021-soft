// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	Command2Internal(ctx context.Context, in *RequestSync, opts ...grpc.CallOption) (*ResponseSync, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) Command2Internal(ctx context.Context, in *RequestSync, opts ...grpc.CallOption) (*ResponseSync, error) {
	out := new(ResponseSync)
	err := c.cc.Invoke(ctx, "/Control/Command2Internal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	Command2Internal(context.Context, *RequestSync) (*ResponseSync, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) Command2Internal(context.Context, *RequestSync) (*ResponseSync, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command2Internal not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_Command2Internal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Command2Internal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/Command2Internal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Command2Internal(ctx, req.(*RequestSync))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command2Internal",
			Handler:    _Control_Command2Internal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/statesync.proto",
}

// BiDirectClient is the client API for BiDirect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiDirectClient interface {
	Talk(ctx context.Context, opts ...grpc.CallOption) (BiDirect_TalkClient, error)
}

type biDirectClient struct {
	cc grpc.ClientConnInterface
}

func NewBiDirectClient(cc grpc.ClientConnInterface) BiDirectClient {
	return &biDirectClient{cc}
}

func (c *biDirectClient) Talk(ctx context.Context, opts ...grpc.CallOption) (BiDirect_TalkClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiDirect_ServiceDesc.Streams[0], "/BiDirect/Talk", opts...)
	if err != nil {
		return nil, err
	}
	x := &biDirectTalkClient{stream}
	return x, nil
}

type BiDirect_TalkClient interface {
	Send(*ResponseSync) error
	Recv() (*RequestSync, error)
	grpc.ClientStream
}

type biDirectTalkClient struct {
	grpc.ClientStream
}

func (x *biDirectTalkClient) Send(m *ResponseSync) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biDirectTalkClient) Recv() (*RequestSync, error) {
	m := new(RequestSync)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirectServer is the server API for BiDirect service.
// All implementations must embed UnimplementedBiDirectServer
// for forward compatibility
type BiDirectServer interface {
	Talk(BiDirect_TalkServer) error
	mustEmbedUnimplementedBiDirectServer()
}

// UnimplementedBiDirectServer must be embedded to have forward compatible implementations.
type UnimplementedBiDirectServer struct {
}

func (UnimplementedBiDirectServer) Talk(BiDirect_TalkServer) error {
	return status.Errorf(codes.Unimplemented, "method Talk not implemented")
}
func (UnimplementedBiDirectServer) mustEmbedUnimplementedBiDirectServer() {}

// UnsafeBiDirectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiDirectServer will
// result in compilation errors.
type UnsafeBiDirectServer interface {
	mustEmbedUnimplementedBiDirectServer()
}

func RegisterBiDirectServer(s grpc.ServiceRegistrar, srv BiDirectServer) {
	s.RegisterService(&BiDirect_ServiceDesc, srv)
}

func _BiDirect_Talk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiDirectServer).Talk(&biDirectTalkServer{stream})
}

type BiDirect_TalkServer interface {
	Send(*RequestSync) error
	Recv() (*ResponseSync, error)
	grpc.ServerStream
}

type biDirectTalkServer struct {
	grpc.ServerStream
}

func (x *biDirectTalkServer) Send(m *RequestSync) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biDirectTalkServer) Recv() (*ResponseSync, error) {
	m := new(ResponseSync)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirect_ServiceDesc is the grpc.ServiceDesc for BiDirect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiDirect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BiDirect",
	HandlerType: (*BiDirectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Talk",
			Handler:       _BiDirect_Talk_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/statesync.proto",
}
